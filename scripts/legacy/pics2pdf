#!/usr/bin/env bash
set -euo pipefail


readonly CURRENT_DIR="$(pwd)"
readonly OUTPUT_DIR=./pdf_export


function process_dir {
    local current_dir
    current_dir="$1"

    echo "---(i) INFO: Processing directory: ${current_dir}"

    local has_images
    has_images=false

    for file in "${current_dir}"/*; do
        # Recursively process if file is a subdirectory
        if test -d "${file}"; then
            process_dir "${file}"
            continue
        fi

        if file "${file}" | grep 'PNG image data' &> /dev/null; then
            has_images=true
        fi
    done

    if test "${has_images}" = 'true'; then
        echo "---(+) OK: Directory has images: ${current_dir}"

        # Covert all images in this directory into PDF
        local all_images
        mapfile -t all_images < <(
            find "${current_dir}" \
                -maxdepth 1 \
                -type f \
                -name '*.png' | \
            sort)

        local pdf_output_path
        pdf_output_path="${OUTPUT_DIR}/$(basename -- "${current_dir}").pdf"

        local logmsg
        logmsg='---(i) INFO: Converting images in a directory to PDF: '
        logmsg="${logmsg}${current_dir} -> ${pdf_output_path}"
        echo "${logmsg}"

        # Covert to PDF and save to output directory
        if ! convert "${all_images[@]}" "${pdf_output_path}"; then
            echo '---(X) ERR: Failed to convert images to PDF'
            exit 1
        else
            echo "---(+) OK: Converted: ${pdf_output_path}"
        fi
    fi
}


function main {
    if ! command -v convert &> /dev/null; then
        local errmsg
        errmsg="---(X) ERR: Failed to locate 'convert' executable. "
        errmsg="${errmsg}Make sure imagemagick package is installed!"
        echo "${errmsg}"
        exit 1
    fi

    echo "---(i) INFO: Creating output directory: ${OUTPUT_DIR}"
    if ! test -d "${OUTPUT_DIR}"; then
        mkdir "${OUTPUT_DIR}"
    else
        local prompt_msg
        prompt_msg='> Output directory already exists. '
        prompt_msg="${prompt_msg}Do you want to proceed? (Y/n): "

        read -p "${prompt_msg}" -r user_decision
        echo

        if test "${user_decision}" != 'Y'; then
            echo '---(i) INFO: Operation canceled. No changes were made.'
            exit 0
        fi
    fi

    process_dir "${CURRENT_DIR}"
    echo '---(+) OK: All done'
}


main "$@"
