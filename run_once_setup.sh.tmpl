{{- if eq .chezmoi.os "linux" -}}
#!/usr/bin/env bash
set -euo pipefail

###############################################################################
# Step 1: Install Paru (AUR helper)
###############################################################################
sudo pacman -Sy

if ! command -v paru &> /dev/null; then
    dir_path="/tmp/$(date +%s)-paru"
    git clone https://aur.archlinux.org/paru.git "${dir_path}"
    cd "${dir_path}" && makepkg -si; cd - && rm -rf "${dir_path}"
fi

###############################################################################
# Step 2: Install packages
###############################################################################
paru --needed -S \
    alacritty \
    ansible \
    alsa-utils \
    base-devel \
    bash-completion \
    bumblebee-status \
    chezmoi \
    dkms \
    dmenu \
    dnsutils \
    eslint \
    exfatprogs \
    feh \
    firefox \
    flake8 \
    glances \
    hadolint-bin \
    i3-gaps \
    i3lock-color \
    inetutils \
    jq \
    kwallet-pam \
    linux-headers \
    lua \
    luacheck \
    usbutils \
    make \
    man \
    mpack \
    neofetch \
    neovim \
    nerd-fonts-hack \
    nmap \
    nvme-cli \
    openssh \
    pam_autologin \
    picom \
    python-beautifulsoup4 \
    python-coloredlogs \
    python-flake8-docstrings \
    python-neovim \
    python-pdm \
    python-pip \
    python-pipenv \
    python-pycodestyle \
    python-pydocstyle \
    python-pylint \
    python-pylint-flask \
    python-pyx \
    rsync \
    ruby-sqlint \
    rustup \
    shellcheck \
    sg3_utils \
    smartmontools \
    standard \
    tmux \
    tree \
    twine \
    unclutter-xfixes-git \
    vagrant \
    ventoy-bin \
    virtualbox \
    xclip \
    xf86-video-intel \
    xorg-server \
    xorg-xinit \
    xorg-xprop \
    yarn \
    wget \
    zfs-dkms

{{ if eq .host.chassis_type "vm" }}
if ! command -v vmware-user-suid-wrapper &> /dev/null; then
    sudo pacman -S \
        gtkmm3 \
        mesa \
        open-vm-tools \
        xf86-input-vmmouse \
        xf86-video-vmware

    sudo systemctl enable vmtoolsd.service
    sudo systemctl enable vmware-vmblock-fuse.service

    echo '---(!) WARNING: Add the following modules to /etc/mkinitcpio.conf and'
    echo '---(!) WARNING: run "mkinitcpio -p linux" to regenerate initramfs'
    echo 'vsock vmw_vsock_vmci_transport vmw_balloon vmw_pvscsi vmw_vmci vmwgfx vmxnet3'
fi
{{ end }}

###############################################################################
# Step 3: Create directories
###############################################################################
{{ if ne .host.desktop_environment "kde" }}
    mkdir -p ~/casino
    mkdir -p ~/development
    mkdir -p ~/documents/notes
    mkdir -p ~/pictures/screenshots

    {{ if eq .host.chassis_type "laptop" }}
        mkdir -p ~/documents
        mkdir -p ~/downloads
        mkdir -p ~/music
        mkdir -p ~/videos
    {{ end }}

    {{ if eq .host.chassis_type "vm" }}
        mkdir -p ~/scratch
    {{ end }}
{{ end }}


{{- else if eq .chezmoi.os "darwin" -}}
#!/usr/bin/env zsh
set -euo pipefail

###############################################################################
# Step 1: Change system-wide defaults
###############################################################################
# Disable annoying press and hold
defaults write -g ApplePressAndHoldEnabled -bool false

# Show dock on all displays
defaults write com.apple.Dock appswitcher-all-displays -bool true
killall Dock

###############################################################################
# Step 2: Install packages
###############################################################################
/opt/homebrew/bin/brew install \
    bash \
    bash-completion@2 \
    buildifier \
    coreutils \
    exiftool \
    findutils \
    gawk \
    gh \
    glances \
    gnu-getopt \
    gnu-indent \
    gnu-sed \
    gnu-tar \
    gnutls \
    hadolint \
    iconsur \
    ipmitool \
    iproute2mac \
    jq \
    minicom \
    mtr \
    neovim \
    nmap \
    nodejs \
    openscad \
    pdm \
    pipx \
    poetry \
    python \
    pipenv \
    ruby \
    rustup \
    screen \
    shellcheck \
    smartmontools \
    tmate \
    tmux \
    tree \
    typescript \
    watch \
    zstd \
    yarn
    # NOTE: Should probably be installed manually when needed
    # openzfs \

# Install pipx packages
pipx install \
    osxphotos

# Initialise Rust
/opt/homebrew/bin/rustup-init

# NOTE: Deprecated as of 2024-06-15
#/opt/homebrew/bin/brew tap homebrew/cask-fonts

/opt/homebrew/bin/brew install --cask font-hack-nerd-font

xcode-select --install || :
xcodebuild -license accept || :

# FIXME: This is broken, presumably because Ruby version is too old
# echo '---(i) INFO: Install neovim Ruby gem -- password prompt inbound'
# sudo gem install neovim

PATH="${PATH}:/opt/homebrew/bin" /opt/homebrew/bin/npm install -g nativefier neovim

# NOTE: Broken as of 2024-06-15, complains about "externally-managed-environment""
#pip3 install --user --upgrade pip pynvim

if test "${SHELL}" != '/opt/homebrew/bin/bash'; then
    echo '---(i) INFO: Setting Bash as a default shell'
    echo "$(/opt/homebrew/bin/brew --prefix)"/bin/bash | sudo tee -a /private/etc/shells
    sudo chpass -s /opt/homebrew/bin/bash "${USER}"
fi

###############################################################################
# Step 3: Create directories
###############################################################################
# NOTE: All other directories should already exist by default
mkdir -p ~/Casino
mkdir -p ~/Development
{{- end }}

###############################################################################
# Step -2: Configure VS Code
###############################################################################
if command -v code; then
    echo '---(i) INFO: Installing VS Code extensions'
    {{ if eq .chezmoi.os "darwin" }}
    "${HOME}/Library/Application Support/Code/User/"install_extensions.sh
    {{ else if eq .chezmoi.os "linux" }}
    "${HOME}/.config/Code/User/"install_extensions.sh
    {{ end }}

    {{ if eq .chezmoi.os "darwin" }}
    echo '---(i) INFO: Disabling Press & Hold in VS Code to enable key repeat'
    defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false
    {{ end }}
else
    echo '---(!) WARN: Skipping extensions setup as VS Code is not installed'
fi

###############################################################################
# Step -1: Execute common commands across Linux / MacOS
###############################################################################
# Install basic Python dependencies
if command -v pip; then
    PIP_COMMAND=pip
else
    PIP_COMMAND=pip3
fi

readonly PIP_COMMAND

# NOTE: Broken on MacOS as of 2024-06-15, complains about "externally-managed-environment""
{{- if eq .chezmoi.os "linux" -}}
"${PIP_COMMAND}" install \
    'pylama[all]' \
    uncompyle6  # Byte-code decomp
{{ end }}

# Disable Yarn analytics
yarn config set --home enableTelemetry 0

# Configure Git
git config --global user.email "{{ .user.email }}"
git config --global user.name "{{ .user.name }}"

# Install and set a default Rust toolchain
rustup install nightly
rustup install stable
rustup default nightly

# Install basic Rust dependencies
cargo install \
    cargo-make \
    starlark_bin

# Install TPM (Tmux Plugin Manager)
git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm &> /dev/null || :

# Generate missing completion scripts
mkdir -p ~/.bash/completions

pdm completion bash > ~/.bash/completions/pdm.bash-completion

find ~/.cargo/registry/src/ -type d -name 'cargo-make-*' | \
    tail -n 1 | \
    xargs -I{} cat {}/extra/shell/makers-completion.bash > ~/.bash/completions/cargo_make.bash-completion

