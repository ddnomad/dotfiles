#!/usr/bin/env bash
set -euo pipefail

# shellcheck disable=SC2155
readonly CMD_NAME="$(basename "$0")"
# shellcheck disable=SC2155
readonly HELP_MESSAGE="$(cat <<EOF
Usage: ${CMD_NAME} [OPTION]... [FILE]

Pretty print input JSON file with jq and pass it to less command preserving colorisation.

OPTIONS
    -d --decompress    Decompress input data before passing it to jq.
    -h --help          Print this help message and exit.

With no FILE, or when FILE is -, read standard input.
EOF
)"

DECOMPRESS=false
FILE_PATH=-

function parse_args {
    local after_fpath
    after_fpath=false

    local arg
    while true; do
        if test "$#" -lt 1; then
            return
        fi

        arg="$1"
        if test "${after_fpath}" = 'true'; then
            >&2 echo "Error: Too many arguments: ${arg}"
            exit 1
        fi

        case "${arg}" in
            -d | --decompress )
                DECOMPRESS=true
                ;;
            -h | --help )
                >&2 echo "${HELP_MESSAGE}"
                exit 0
                ;;
            - )
                after_fpath=true
                ;;
            -* )
                >&2 echo "Error: Unknown option: ${arg}"
                exit 1
                ;;
            * )
                FILE_PATH="${arg}"
                after_fpath=true
                ;;
        esac

        shift
    done
}

function main {
    parse_args "$@"

    if test "${FILE_PATH}" != - && ! test -f "${FILE_PATH}"; then
        >&2 echo "Error: Input file is not found or not a regular file: ${FILE_PATH}"
        exit 1
    fi

    file_type="$(file "${FILE_PATH}")"

    if test "${DECOMPRESS}" = true; then
        # TODO: Read magic on the go and decompress if supported?
        if test "${FILE_PATH}" = -; then
            >&2 echo 'Error: Cannot automatically decompress when reading from STDIN'
            exit 1
        fi

        case "${file_type}" in
            *'JSON data' )
                >&2 echo "Error: Input file is not compressed: ${file_type}"
                exit 1
                ;;
            * )
                >&2 echo "Error: Unsupported file type: ${file_type}"
                exit 1
                ;;
        esac
    fi

}

jqless() {
    local json_fpath
    local decompress

    if test "$#" -eq 1 && test "$1" != '-g'; then
        json_fpath="$1"
        decompress=false

    elif test "$#" -eq 2 && test "$1" = '-g'; then
        json_fpath="$2"
        decompress=true

    else
        echo 'Usage: jqless [-g] FILE'
        echo
        echo 'Pretty print input JSON file with jq and pass it to less'
        echo 'command preserving colors. If -g specified, treat a given'
        echo 'file as a gzip archive (decompress first).'

        return 1
    fi

    if ! test -f "${json_fpath}"; then
        echo "Error: No such file: ${json_fpath}"
        return 1
    fi

    if test "${decompress}" = true; then
        gzcat -d "${json_fpath}" | jq --color-output | less -R

    else
        jq --color-output < "${json_fpath}" | less -R
    fi
}

main "$@"
